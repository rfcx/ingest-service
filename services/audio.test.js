const audioService = require('./audio')
const path = require('path')
const fs = require('fs')
const { rimraf } = require('rimraf')

const destDir = path.join(__dirname, '../test/tmp/')

beforeEach(async () => {
  if (!fs.existsSync(destDir)) {
    fs.mkdirSync(destDir)
  }
})

afterEach(async () => {
  await rimraf(destDir + '*', { glob: true })
})

describe('Test audio service', () => {
  test('Can identify', async () => {
    const pathFile = path.join(__dirname, '../test/', 'test-5mins-lv8.flac')

    const result = await audioService.identify(pathFile)

    expect(result.format).toBe('flac')
    expect(result.duration).toBe(299.806032)
    expect(result.sampleCount).toBe(13221446)
    expect(result.channelLayout).toBe('mono')
    expect(result.channelCount).toBe(1)
    expect(result.bitRate).toBe(178060)
    expect(result.sampleRate).toBe(44100)
    expect(result.codec).toBe('flac')
    expect(result.tags).toMatchObject({})
    expect(result.size).toBe(6672949)
    expect(result.checksum).toBe('c0cdd1156b69c8255ff83b9eb0ba6412cced8411')
  })
  test('Can split', async () => {
    const pathFile = path.join(__dirname, '../test/', 'test-5mins-lv8.flac')

    const splittedFiles = await audioService.split(pathFile, destDir, 60)

    expect(splittedFiles.length).toBe(5)
    expect(splittedFiles[0].path).toBe('/var/app/test/tmp/test-5mins-lv8.000.flac')
    expect(splittedFiles[0].meta.format).toBe('flac')
    expect(splittedFiles[0].meta.duration).toBe(299.806032)
    expect(splittedFiles[0].meta.sampleCount).toBe(13221446)
    expect(splittedFiles[0].meta.channelLayout).toBe('mono')
    expect(splittedFiles[0].meta.channelCount).toBe(1)
    expect(splittedFiles[0].meta.bitRate).toBe(424)
    expect(splittedFiles[0].meta.sampleRate).toBe(44100)
    expect(splittedFiles[0].meta.codec).toBe('flac')
    expect(splittedFiles[0].meta.tags).toMatchObject({ encoder: 'Lavf59.27.100' })
    expect(splittedFiles[0].meta.size).toBe(15912)
    expect(splittedFiles[0].meta.checksum).toBe('e68f894f1e6e1b9eb025ee0db4b3ced7cde13b48')
    expect(splittedFiles[1].path).toBe('/var/app/test/tmp/test-5mins-lv8.001.flac')
    expect(splittedFiles[1].meta.format).toBe('flac')
    expect(splittedFiles[1].meta.duration).toBe(299.806032)
    expect(splittedFiles[1].meta.sampleCount).toBe(13221446)
    expect(splittedFiles[1].meta.channelLayout).toBe('mono')
    expect(splittedFiles[1].meta.channelCount).toBe(1)
    expect(splittedFiles[1].meta.bitRate).toBe(28389)
    expect(splittedFiles[1].meta.sampleRate).toBe(44100)
    expect(splittedFiles[1].meta.codec).toBe('flac')
    expect(splittedFiles[1].meta.tags).toMatchObject({ encoder: 'Lavf59.27.100' })
    expect(splittedFiles[1].meta.size).toBe(1063917)
    expect(splittedFiles[1].meta.checksum).toBe('e3c1428c7988e4fe9d642158e9eb8f980c5f8ff0')
    expect(splittedFiles[2].path).toBe('/var/app/test/tmp/test-5mins-lv8.002.flac')
    expect(splittedFiles[2].meta.format).toBe('flac')
    expect(splittedFiles[2].meta.duration).toBe(299.806032)
    expect(splittedFiles[2].meta.sampleCount).toBe(13221446)
    expect(splittedFiles[2].meta.channelLayout).toBe('mono')
    expect(splittedFiles[2].meta.channelCount).toBe(1)
    expect(splittedFiles[2].meta.bitRate).toBe(48394)
    expect(splittedFiles[2].meta.sampleRate).toBe(44100)
    expect(splittedFiles[2].meta.codec).toBe('flac')
    expect(splittedFiles[2].meta.tags).toMatchObject({ encoder: 'Lavf59.27.100' })
    expect(splittedFiles[2].meta.size).toBe(1813608)
    expect(splittedFiles[2].meta.checksum).toBe('ca5b2cf10962f733ed2d33e78e5cc9ba06bce72b')
    expect(splittedFiles[3].path).toBe('/var/app/test/tmp/test-5mins-lv8.003.flac')
    expect(splittedFiles[3].meta.format).toBe('flac')
    expect(splittedFiles[3].meta.duration).toBe(299.806032)
    expect(splittedFiles[3].meta.sampleCount).toBe(13221446)
    expect(splittedFiles[3].meta.channelLayout).toBe('mono')
    expect(splittedFiles[3].meta.channelCount).toBe(1)
    expect(splittedFiles[3].meta.bitRate).toBe(49454)
    expect(splittedFiles[3].meta.sampleRate).toBe(44100)
    expect(splittedFiles[3].meta.codec).toBe('flac')
    expect(splittedFiles[3].meta.tags).toMatchObject({ encoder: 'Lavf59.27.100' })
    expect(splittedFiles[3].meta.size).toBe(1853343)
    expect(splittedFiles[3].meta.checksum).toBe('d9c80f6b60d3712d58256297897af1be3decd85e')
    expect(splittedFiles[4].path).toBe('/var/app/test/tmp/test-5mins-lv8.004.flac')
    expect(splittedFiles[4].meta.format).toBe('flac')
    expect(splittedFiles[4].meta.duration).toBe(299.806032)
    expect(splittedFiles[4].meta.sampleCount).toBe(13221446)
    expect(splittedFiles[4].meta.channelLayout).toBe('mono')
    expect(splittedFiles[4].meta.channelCount).toBe(1)
    expect(splittedFiles[4].meta.bitRate).toBe(52501)
    expect(splittedFiles[4].meta.sampleRate).toBe(44100)
    expect(splittedFiles[4].meta.codec).toBe('flac')
    expect(splittedFiles[4].meta.tags).toMatchObject({ encoder: 'Lavf59.27.100' })
    expect(splittedFiles[4].meta.size).toBe(1967523)
    expect(splittedFiles[4].meta.checksum).toBe('abb8d41e939800f3f72b5dea845ff119afcad798')
  })
  test('Can convert', async () => {
    const pathFile = path.join(__dirname, '../test/', 'test-5mins-lv8.flac')
    const destPath = path.join(destDir, 'test-5mins-lv8.wav')

    const convertedFile = await audioService.convert(pathFile, destPath)

    expect(convertedFile.path).toBe('/var/app/test/tmp/test-5mins-lv8.wav')
    expect(convertedFile.meta.format).toBe('wav')
    expect(convertedFile.meta.duration).toBe(299.806032)
    expect(convertedFile.meta.sampleCount).toBe(13221446)
    expect(convertedFile.meta.channelLayout).toBe('unknown')
    expect(convertedFile.meta.channelCount).toBe(1)
    expect(convertedFile.meta.bitRate).toBe(705600)
    expect(convertedFile.meta.sampleRate).toBe(44100)
    expect(convertedFile.meta.codec).toBe('pcm_s16le')
    expect(convertedFile.meta.tags).toMatchObject({ encoder: 'Lavf59.27.100' })
    expect(convertedFile.meta.size).toBe(26442970)
    expect(convertedFile.meta.checksum).toBe('ffea80f0ce819e824f02b2da0e3785806990e223')
  })
})
